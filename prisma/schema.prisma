generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Rep {
  id               String          @id @default(cuid())
  done             Boolean
  secoundsAmount   Int?
  weightAmount     Int?
  repsAmount       Int?
  WorkoutSession   WorkoutSession? @relation(fields: [workoutSessionId], references: [id])
  workoutSessionId String?
  workoutId        String
}

model Workout {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  userId         String
  title          String
  description    String?          @db.Text
  repUnit        RepUnit?
  includeSeconds Boolean?
  includeWeight  Boolean?
  includeReps    Boolean?
  reps           Int?
  intensity      Intensity
  sessions       WorkoutSession[]
  notes          Note[]
}

model Note {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  description      String
  updatedAt        DateTime?
  workoutId        String
  userId           String
  workoutSessionId String?         @unique
  Workout          Workout         @relation(fields: [workoutId], references: [id])
  WorkoutSession   WorkoutSession?
}

model WorkoutSession {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  userId    String
  workoutId String
  date      DateTime
  done      Boolean   @default(false)
  doneAt    DateTime?
  notes     String?   @db.Text
  workout   Workout   @relation(fields: [workoutId], references: [id])
  reps      Rep[]
  note      Note?     @relation(fields: [noteId], references: [id])
  noteId    String?   @unique
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model Labels {
  id             String?  @db.VarChar(255)
  label          String?  @db.VarChar(255)
  labelKey       String?  @db.VarChar(255)
  userId         String?  @db.VarChar(255)
  isDefaultLabel Boolean?

  @@ignore
}

enum Intensity {
  HARD
  MEDIUM
  EASY
}

enum RepUnit {
  SECOND
  KG
  REP
}
